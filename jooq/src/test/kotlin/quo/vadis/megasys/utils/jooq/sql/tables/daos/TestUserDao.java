/*
 * This file is generated by jOOQ.
 */
package quo.vadis.megasys.utils.jooq.sql.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;

import quo.vadis.megasys.utils.jooq.sql.tables.TestUserTable;
import quo.vadis.megasys.utils.jooq.sql.tables.pojos.TestUserEntity;
import quo.vadis.megasys.utils.jooq.sql.tables.records.TestUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestUserDao extends DAOImpl<TestUserRecord, TestUserEntity, Long> {

    /**
     * Create a new TestUserDao without any configuration
     */
    public TestUserDao() {
        super(TestUserTable.TEST_USER, TestUserEntity.class);
    }

    /**
     * Create a new TestUserDao with an attached configuration
     */
    public TestUserDao(Configuration configuration) {
        super(TestUserTable.TEST_USER, TestUserEntity.class, configuration);
    }

    @Override
    public Long getId(TestUserEntity object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserEntity> fetchRangeOfUserIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestUserTable.TEST_USER.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<TestUserEntity> fetchByUserIdTable(Long... values) {
        return fetch(TestUserTable.TEST_USER.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public TestUserEntity fetchOneByUserIdTable(Long value) {
        return fetchOne(TestUserTable.TEST_USER.USER_ID, value);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserEntity> fetchRangeOfUserNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestUserTable.TEST_USER.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<TestUserEntity> fetchByUserNameTable(String... values) {
        return fetch(TestUserTable.TEST_USER.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>payload BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserEntity> fetchRangeOfPayloadTable(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(TestUserTable.TEST_USER.PAYLOAD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    public List<TestUserEntity> fetchByPayloadTable(JSONB... values) {
        return fetch(TestUserTable.TEST_USER.PAYLOAD, values);
    }
}
