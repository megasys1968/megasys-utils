/*
 * This file is generated by jOOQ.
 */
package quo.vadis.megasys.utils.jooq.sql.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;

import quo.vadis.megasys.utils.jooq.sql.tables.TestGroupTable;
import quo.vadis.megasys.utils.jooq.sql.tables.pojos.TestGroupEntity;
import quo.vadis.megasys.utils.jooq.sql.tables.records.TestGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestGroupDao extends DAOImpl<TestGroupRecord, TestGroupEntity, Long> {

    /**
     * Create a new TestGroupDao without any configuration
     */
    public TestGroupDao() {
        super(TestGroupTable.TEST_GROUP, TestGroupEntity.class);
    }

    /**
     * Create a new TestGroupDao with an attached configuration
     */
    public TestGroupDao(Configuration configuration) {
        super(TestGroupTable.TEST_GROUP, TestGroupEntity.class, configuration);
    }

    @Override
    public Long getId(TestGroupEntity object) {
        return object.getGroupId();
    }

    /**
     * Fetch records that have <code>group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestGroupEntity> fetchRangeOfGroupIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestGroupTable.TEST_GROUP.GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_id IN (values)</code>
     */
    public List<TestGroupEntity> fetchByGroupIdTable(Long... values) {
        return fetch(TestGroupTable.TEST_GROUP.GROUP_ID, values);
    }

    /**
     * Fetch a unique record that has <code>group_id = value</code>
     */
    public TestGroupEntity fetchOneByGroupIdTable(Long value) {
        return fetchOne(TestGroupTable.TEST_GROUP.GROUP_ID, value);
    }

    /**
     * Fetch records that have <code>group_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestGroupEntity> fetchRangeOfGroupNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestGroupTable.TEST_GROUP.GROUP_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_name IN (values)</code>
     */
    public List<TestGroupEntity> fetchByGroupNameTable(String... values) {
        return fetch(TestGroupTable.TEST_GROUP.GROUP_NAME, values);
    }

    /**
     * Fetch records that have <code>payload BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestGroupEntity> fetchRangeOfPayloadTable(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(TestGroupTable.TEST_GROUP.PAYLOAD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    public List<TestGroupEntity> fetchByPayloadTable(JSONB... values) {
        return fetch(TestGroupTable.TEST_GROUP.PAYLOAD, values);
    }
}
