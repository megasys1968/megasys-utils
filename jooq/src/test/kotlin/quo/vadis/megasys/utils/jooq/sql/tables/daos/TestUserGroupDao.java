/*
 * This file is generated by jOOQ.
 */
package quo.vadis.megasys.utils.jooq.sql.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import quo.vadis.megasys.utils.jooq.sql.tables.TestUserGroupTable;
import quo.vadis.megasys.utils.jooq.sql.tables.pojos.TestUserGroupEntity;
import quo.vadis.megasys.utils.jooq.sql.tables.records.TestUserGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestUserGroupDao extends DAOImpl<TestUserGroupRecord, TestUserGroupEntity, Record2<Long, Long>> {

    /**
     * Create a new TestUserGroupDao without any configuration
     */
    public TestUserGroupDao() {
        super(TestUserGroupTable.TEST_USER_GROUP, TestUserGroupEntity.class);
    }

    /**
     * Create a new TestUserGroupDao with an attached configuration
     */
    public TestUserGroupDao(Configuration configuration) {
        super(TestUserGroupTable.TEST_USER_GROUP, TestUserGroupEntity.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(TestUserGroupEntity object) {
        return compositeKeyRecord(object.getUserId(), object.getGroupId());
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserGroupEntity> fetchRangeOfUserIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestUserGroupTable.TEST_USER_GROUP.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<TestUserGroupEntity> fetchByUserIdTable(Long... values) {
        return fetch(TestUserGroupTable.TEST_USER_GROUP.USER_ID, values);
    }

    /**
     * Fetch records that have <code>group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserGroupEntity> fetchRangeOfGroupIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestUserGroupTable.TEST_USER_GROUP.GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_id IN (values)</code>
     */
    public List<TestUserGroupEntity> fetchByGroupIdTable(Long... values) {
        return fetch(TestUserGroupTable.TEST_USER_GROUP.GROUP_ID, values);
    }

    /**
     * Fetch records that have <code>memo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TestUserGroupEntity> fetchRangeOfMemoTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestUserGroupTable.TEST_USER_GROUP.MEMO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>memo IN (values)</code>
     */
    public List<TestUserGroupEntity> fetchByMemoTable(String... values) {
        return fetch(TestUserGroupTable.TEST_USER_GROUP.MEMO, values);
    }
}
